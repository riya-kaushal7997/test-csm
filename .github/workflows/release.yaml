name: Release CSM
# Invocable as a reusable workflow
# Can be manually triggered
on:  # yamllint disable-line rule:truthy
  workflow_call:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (major, minor, patch) Ex: 1.0.0'
        required: true
jobs:
  build-and-scan:
    name: Build and Release
    runs-on: ubuntu-latest
    steps:
      - name: Validate version input
        run: |
          if [[ "${{ github.event.inputs.version }}" == "none" ]]; then
            echo "Invalid version specified: ${{ github.event.inputs.version }} Must follow major, minor, patch versioning."
            exit 1
          fi
      - name: Checkout the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'

      - name: Fetch all tags
        run: git fetch --tags

      - name: Create new tag
        run: |
          git tag v${{ github.event.inputs.version }}
          git push origin v${{ github.event.inputs.version }}

      - name: Create Release Branch
        run: |
          git checkout -b release-v${{ github.event.inputs.version }}
          git push --set-upstream origin release-v${{ github.event.inputs.version }}

      - name: Switch to Release Branch
        run: |
          git checkout release-v${{ github.event.inputs.version }}
          echo "Currently on branch: $(git branch --show-current)"

      - name: Update and commit Changelog
        run: |
          echo "## [v${{ github.event.inputs.version }}] - $(date +'%Y-%m-%d')" >> CHANGELOG-${{ github.event.inputs.version }}.md
          echo "- Added new release." >> CHANGELOG-${{ github.event.inputs.version }}.md
          cat CHANGELOG-${{ github.event.inputs.version }}.md
          ls -l CHANGELOG-${{ github.event.inputs.version }}.md
          git add CHANGELOG-${{ github.event.inputs.version }}.md
          git commit -m "Update changelog for release v${{ github.event.inputs.version }}"
          git push origin release-v${{ github.event.inputs.version }}

      - name: Check branch status
        run: |
          echo "Checking branch status..."
          git status
          git branch -a
          git log -1
          git diff main...release-v${{ github.event.inputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify branch changes
        run: |
          if git diff --quiet main release-v${{ github.event.inputs.version }}; then
            echo "No changes detected between release-v2.1.2 and main. Aborting."
            exit 1
          else
            echo "Changes detected. Proceeding with PR creation."
          fi

      - name: Create Pull request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: release-v${{ github.event.inputs.version }}
          base: main
          title: "Release v${{ github.event.inputs.version }}"
          body: "This PR merges the release-v${{ github.event.inputs.version }} into main."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Wait for PR to be merged
        run: |
          echo "Waiting for the PR to be merged. Please merge the PR manually."
          while true; do
            pr_status=$(gh pr view "release-v${{ github.event.inputs.version }}" --json state --jq '.state')
            if [ "$pr_status" = "MERGED" ]; then
              echo "PR has been merged."
              break
            fi
            echo "PR not merged yet. Sleeping for 1 minute..."
            sleep 60
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}