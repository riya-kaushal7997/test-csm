name: Release CSM
# Invocable as a reusable workflow
# Can be manually triggered
on:  # yamllint disable-line rule:truthy
  workflow_call:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (major, minor, patch) Ex: 1.0.0'
        required: true
jobs:
  build-and-scan:
    name: Build and Release
    runs-on: ubuntu-latest
    steps:
      - name: Set Release version and branch name
        run: |
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          echo "branch_name=release-v${{ github.event.inputs.version }}" >> $GITHUB_ENV

      - name: Validate version input
        run: |
          if [[ "$version" == "none" ]]; then
            echo "Invalid version specified: $version Must follow major, minor, patch versioning."
            exit 1
          fi
        env:
          version: ${{ env.version }}

      - name: Checkout the code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.branch_name }}
          fetch-depth: 0

#      - name: Set up Go
#        uses: actions/setup-go@v5
#        with:
#          go-version: "1.23"

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'

#      - name: Fetch all tags
#        run: git fetch --tags
#
#      - name: Create new tag
#        run: |
#          git tag v${{ github.event.inputs.version }}
#          git push origin v${{ github.event.inputs.version }}

      # - uses: actions/create-github-app-token@v1.11.0
      #   id: generate-token
      #   with:
      #     app-id: ${{ vars.CSM_RELEASE_APP_ID }}
      #     private-key: ${{ secrets.CSM_RELEASE_APP_PRIVATE_KEY }}

      - name: Verify if release branch exists
        run: |
          echo "Checking if release branch '${{ env.branch_name }}' exists..."
          git fetch --all
          echo "Listing all remote branches..."
          git branch -r
          if git branch -r | grep "origin/${{ env.branch_name }}"; then
            echo "The branch ${{ env.branch_name }} exists."
          else
            echo "The branch ${{ env.branch_name }} does not exist."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify branch changes
        run: |
          changes_made=false
          if git diff --quiet origin/main origin/${{ env.branch_name }}; then
            echo "No changes detected between ${{ env.branch_name }} and main. Aborting.."
            echo "changes_made=false" >> $GITHUB_ENV
            exit 1
          else
            echo "Changes detected. Proceeding for PR creation"
            echo "changes_made=true" >> $GITHUB_ENV
          fi

          echo "Commit log of ${{ env.branch_name }} compared to main:"
          git log origin/main..origin/${{ env.branch_name }} --oneline
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Fetch the remote branch and create a local version
#      - name: Fetch and checkout release branch
#        run: |
#          git fetch origin $branch_name
#          git checkout -b $branch_name origin/$branch_name || git checkout $branch_name
#          git pull origin $branch_name  # Ensure local branch is up to date
#        env:
#          branch_name: ${{ env.branch_name }}

      # Create a Pull Request using GitHub CLI
      - name: Create Pull Request using GitHub CLI
        run: |
          gh pr create --title "Release v${{ env.version }}" \
                       --body "This PR merges the release-v${{ env.version }} into main." \
                       --base main \
                       --head ${{ env.branch_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


#      - name: Wait for PR to be merged
#        if: env.changes_made == 'true'
#        run: |
#          echo "Waiting for the PR to be merged. Please merge the PR manually."
#          while true; do
#            pr_status=$(gh pr view "release-v${{ github.event.inputs.version }}" --json state --jq '.state')
#            if [ "$pr_status" = "MERGED" ]; then
#              echo "PR has been merged."
#              break
#            fi
#            echo "PR not merged yet. Sleeping for 1 minute..."
#            sleep 60
#          done
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
