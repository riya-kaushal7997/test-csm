name: Release CSM
# Invocable as a reusable workflow
# Can be manually triggered
on:  # yamllint disable-line rule:truthy
  workflow_call:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (major, minor, patch) Ex: 1.0.0'
        required: true
jobs:
  build-and-scan:
    name: Build and Release
    runs-on: ubuntu-latest
    steps:
      - name: Validate version input
        run: |
          if [[ "${{ github.event.inputs.version }}" == "none" ]]; then
            echo "Invalid version specified: ${{ github.event.inputs.version }} Must follow major, minor, patch versioning."
            exit 1
          fi
      - name: Checkout the code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Fetch all tags
        run: git fetch --tags

      - name: Create new tag
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git tag v${{ github.event.inputs.version }}
          git push origin v${{ github.event.inputs.version }}

      - name: Create release branch
        run: |
          git checkout -b release-v${{ github.event.inputs.version }}
          git push origin release-v${{ github.event.inputs.version }}

      - name: Update Changelog
        run: |
          echo "## [${{ github.event.inputs.version }}] - $(date +'%Y-%m-%d')" >> CHANGELOG-${{ github.event.inputs.version }}.md
          echo "- Added new release." >> CHANGELOG-${{ github.event.inputs.version }}.md
          git add CHANGELOG-${{ github.event.inputs.version }}.md
          git commit -m "Update changelog for release v${{ github.event.inputs.version }}"
          git push origin release-v${{ github.event.inputs.version }}

      - name: Create Pull request
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: release-v${{ github.event.inputs.version }}
          base: main
          title: "Release v${{ github.event.inputs.version }}"
          body: "This PR merges the release-v${{ github.event.inputs.version }} into main."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Check branch status
      #   run: |
      #     echo "Checking branch status..."
      #     git status
      #     git branch -a
      #     git log -1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Wait for PR to be merged
        run: |
          echo "Waiting for the PR to be merged. Please merge the PR manually."
          while true; do
            pr_status=$(gh pr view update-common-dependency --json state --jq '.state')
            if [ "$pr_status" = "MERGED" ]; then
              echo "PR has been merged."
              break
            fi
            echo "PR not merged yet. Sleeping for 1 minute..."
            sleep 60
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}