name: Release CSM
# Invocable as a reusable workflow
# Can be manually triggered
on:  # yamllint disable-line rule:truthy
  workflow_call:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (major, minor, patch) Ex: 1.0.0'
        required: true
jobs:
  build-and-scan:
    name: Build and Release
    runs-on: ubuntu-latest
    steps:
      - name: Set Release version and branch name
        run: |
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          echo "branch_name=release-v${{ github.event.inputs.version }}" >> $GITHUB_ENV

      - name: Validate version input
        run: |
          if [[ "$version" == "none" ]]; then
            echo "Invalid version specified: $version Must follow major, minor, patch versioning."
            exit 1
          fi
        env:
          version: ${{ env.version }}

      - name: Checkout the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

#      - name: Set up Go
#        uses: actions/setup-go@v5
#        with:
#          go-version: "1.23"

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'

#      - name: Fetch all tags
#        run: git fetch --tags
#
#      - name: Create new tag
#        run: |
#          git tag v${{ github.event.inputs.version }}
#          git push origin v${{ github.event.inputs.version }}

#      - name: Create Release Branch
#        run: |
#          git checkout -b $branch_name
#          git push --set-upstream origin $branch_name
#        env:
#          branch_name: ${{ env.branch_name }}

#      - name: Switch to Release Branch
#        run: |
#          git checkout $branch_name
#          echo "Currently on branch: $(git branch --show-current)"

      - name: Update and commit Changelog
        run: |
          echo "Updating and committing CHANGELOG-$version"
          echo "## [v$version] - $(date +'%Y-%m-%d')" >> CHANGELOG-$version.md

          echo "- Added new release." >> CHANGELOG-$version.md
          echo "- Updated CSM documentation." >> CHANGELOG-$version.md
          echo "- Fixed bug for XYZ driver." >> CHANGELOG-$version.md

          cat CHANGELOG-$version.md
          ls -l CHANGELOG-$version.md

          echo "Staging and commiting the CHANGELOG-$version.md"
          git add CHANGELOG-$version.md
          git commit -m "Update changelog for release v$version"
          echo "changes_made=true" >> $GITHUB_ENV
#          git push origin $branch_name
        env:
          version: ${{ env.version }}
          branch_name: ${{ env.branch_name }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#      - name: Check branch status
#        run: |
#          echo "Checking branch status..."
#          git status
#          git branch -a
#          git log -1
#          git diff main...release-v${{ github.event.inputs.version }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#      - name: Verify branch changes
#        run: |
#          changes_made=true
#          if git diff --quiet main release-v${{ github.event.inputs.version }}; then
#            echo "No changes detected between release-v2.1.2 and main. Aborting.."
#            echo "changes_made=false" >> $GITHUB_ENV
#            exit 1
#          else
#            echo "Changes detected. Proceeding for PR creation"
#            echo "changes_made=true" >> $GITHUB_ENV
#          fi
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#      - name: Switch back to base branch
#        if: env.changes_made == 'true'
#        run: |
#          echo "Switching back to base branch main"
#          git checkout main
#          echo "Current branch after switching back: $(git branch --show-current)"

      - name: Create Pull request
        if: env.changes_made == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: release-v${{ github.event.inputs.version }}
          base: test-release-main
          commit-message: "Adding CHANGELOG file for new release ${{ env.version }}"
          title: "Release v${{ github.event.inputs.version }}"
          body: "This PR merges the release-v${{ github.event.inputs.version }} into main."
          sign-commits: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


#      - name: Wait for PR to be merged
#        if: env.changes_made == 'true'
#        run: |
#          echo "Waiting for the PR to be merged. Please merge the PR manually."
#          while true; do
#            pr_status=$(gh pr view "release-v${{ github.event.inputs.version }}" --json state --jq '.state')
#            if [ "$pr_status" = "MERGED" ]; then
#              echo "PR has been merged."
#              break
#            fi
#            echo "PR not merged yet. Sleeping for 1 minute..."
#            sleep 60
#          done
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}